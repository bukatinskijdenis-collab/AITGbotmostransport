#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import telebot
from gtts import gTTS
import os
import requests
import time
import logging
import sys
import uuid
import urllib3

# --- –û—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (self-signed certificate) ---
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("GigaChatBot")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = "8251896486:AAFb9SBoI_TKjIbYrFgMiUTPPbJo1dJu-Xw"

# –î–∞–Ω–Ω—ã–µ –∏–∑ SberStudio - CLIENT_SECRET —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials
AUTHORIZATION_KEY = "MDE5OWU3ODYtN2Q3Yy03NjlhLTg5YjQtN2YwODZjMTlkZTc1OjQ0MzE5M2YzLTkxZjctNDI0YS05YWY5LWQ1NGY3OWY2ZmU3Mw=="

OAUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
CHAT_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
MODELS_URL = "https://gigachat.devices.sberbank.ru/api/v1/models"

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

access_token = None
token_expires = 0


# ====== –ü–æ–ª—É—á–µ–Ω–∏–µ access_token ======
def get_gigachat_token():
    global access_token, token_expires

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),
        'Authorization': f'Basic {AUTHORIZATION_KEY}'
    }

    payload = {
        'scope': 'GIGACHAT_API_PERS'
    }

    try:
        logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat...")
        response = requests.post(
            OAUTH_URL,
            headers=headers,
            data=payload,
            verify=False,
            timeout=30
        )

        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get("access_token")
            expires_in = token_data.get("expires_in", 1800)
            token_expires = time.time() + expires_in - 60

            if access_token:
                logger.info(f"‚úÖ Access token –ø–æ–ª—É—á–µ–Ω, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω {expires_in} —Å–µ–∫.")
                return True
            else:
                logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
            logger.error(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False


def is_token_valid():
    return access_token and time.time() < token_expires


# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π ======
def check_models_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π GigaChat"""
    if not is_token_valid():
        if not get_gigachat_token():
            return False

    headers = {
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...")
        response = requests.get(
            MODELS_URL,
            headers=headers,
            verify=False,
            timeout=30
        )

        if response.status_code == 200:
            models_data = response.json()
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {len(models_data.get('data', []))} –º–æ–¥–µ–ª–µ–π")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {response.status_code}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return False


# ====== –ó–∞–ø—Ä–æ—Å –∫ GigaChat ======
def ask_gigachat(prompt: str) -> str:
    global access_token

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not is_token_valid():
        logger.info("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π...")
        if not get_gigachat_token():
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat"

    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    payload = {
        "model": "GigaChat",
        "messages": [
            {
                "role": "user",
                "content": prompt
            }
        ],
        "temperature": 0.7,
        "max_tokens": 1024
    }

    try:
        logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat...")
        response = requests.post(
            CHAT_URL,
            headers=headers,
            json=payload,
            verify=False,
            timeout=60
        )

        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GigaChat: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            try:
                answer = data["choices"][0]["message"]["content"]
                logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç GigaChat –ø–æ–ª—É—á–µ–Ω")
                return answer
            except (KeyError, IndexError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
                return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ GigaChat"

        elif response.status_code == 401:
            logger.warning("üîÑ –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...")
            if get_gigachat_token():
                headers["Authorization"] = f"Bearer {access_token}"
                response2 = requests.post(CHAT_URL, headers=headers, json=payload, verify=False, timeout=60)
                if response2.status_code == 200:
                    data2 = response2.json()
                    return data2["choices"][0]["message"]["content"]
            return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GigaChat"

        elif response.status_code == 429:
            return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return f"‚ùå –û—à–∏–±–∫–∞ GigaChat API: {response.status_code}"

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GigaChat: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"


# ====== Telegram –±–æ—Ç ======
@bot.message_handler(commands=['start', 'help'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç GigaChat.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º!"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if get_gigachat_token():
        bot.send_message(message.chat.id, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ GigaChat")


@bot.message_handler(commands=['test'])
def test_connection(message):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat"""
    if get_gigachat_token():
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        if check_models_availability():
            bot.send_message(message.chat.id, "‚úÖ –ú–æ–¥–µ–ª–∏ GigaChat –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            bot.send_message(message.chat.id, "‚ö† –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –º–æ–¥–µ–ª—è–º")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_text = message.text

    if not user_text or user_text.strip() == "":
        bot.send_message(message.chat.id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    processing_msg = bot.send_message(message.chat.id, "‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    try:
        answer = ask_gigachat(user_text)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º..."
        try:
            bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        bot.send_message(message.chat.id, f"üí¨ –û—Ç–≤–µ—Ç:\n{answer}")

        # –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        try:
            bot.send_chat_action(message.chat.id, 'record_voice')

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è TTS
            tts_text = answer[:500] if len(answer) > 500 else answer

            audio_file = f"voice_{message.message_id}_{int(time.time())}.mp3"
            tts = gTTS(text=tts_text, lang='ru', slow=False)
            tts.save(audio_file)

            with open(audio_file, "rb") as voice:
                bot.send_voice(message.chat.id, voice, caption="üéß –ê—É–¥–∏–æ–æ—Ç–≤–µ—Ç")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(audio_file):
                os.remove(audio_file)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏: {e}")

    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ======
def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if get_gigachat_token():
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")


# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    initialize_bot()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")

    try:
        bot.polling(none_stop=True, interval=1, timeout=60)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)
